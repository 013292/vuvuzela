// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mixnet.proto

/*
	Package convopb is a generated protocol buffer package.

	We can't name this mixnetpb because it conflicts with
	Alpenhorn's mixnetpb package.

	It is generated from these files:
		mixnet.proto

	It has these top-level messages:
		Nothing
		NewRoundRequest
		PublicServerConfig
		NewRoundResponse
		RoundSettings
		SetRoundSettingsRequest
		RoundSettingsSignature
		SetNumIncomingRequest
		AddOnionsRequest
		CloseRoundRequest
		GetOnionsRequest
		GetOnionsResponse
		DeleteRoundRequest
*/
package convopb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Nothing struct {
}

func (m *Nothing) Reset()                    { *m = Nothing{} }
func (m *Nothing) String() string            { return proto.CompactTextString(m) }
func (*Nothing) ProtoMessage()               {}
func (*Nothing) Descriptor() ([]byte, []int) { return fileDescriptorMixnet, []int{0} }

type NewRoundRequest struct {
	Service string                `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Round   uint32                `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Chain   []*PublicServerConfig `protobuf:"bytes,3,rep,name=chain" json:"chain,omitempty"`
}

func (m *NewRoundRequest) Reset()                    { *m = NewRoundRequest{} }
func (m *NewRoundRequest) String() string            { return proto.CompactTextString(m) }
func (*NewRoundRequest) ProtoMessage()               {}
func (*NewRoundRequest) Descriptor() ([]byte, []int) { return fileDescriptorMixnet, []int{1} }

func (m *NewRoundRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *NewRoundRequest) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *NewRoundRequest) GetChain() []*PublicServerConfig {
	if m != nil {
		return m.Chain
	}
	return nil
}

type PublicServerConfig struct {
	Key     []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *PublicServerConfig) Reset()                    { *m = PublicServerConfig{} }
func (m *PublicServerConfig) String() string            { return proto.CompactTextString(m) }
func (*PublicServerConfig) ProtoMessage()               {}
func (*PublicServerConfig) Descriptor() ([]byte, []int) { return fileDescriptorMixnet, []int{2} }

func (m *PublicServerConfig) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *PublicServerConfig) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type NewRoundResponse struct {
	OnionKey []byte `protobuf:"bytes,1,opt,name=onion_key,json=onionKey,proto3" json:"onion_key,omitempty"`
}

func (m *NewRoundResponse) Reset()                    { *m = NewRoundResponse{} }
func (m *NewRoundResponse) String() string            { return proto.CompactTextString(m) }
func (*NewRoundResponse) ProtoMessage()               {}
func (*NewRoundResponse) Descriptor() ([]byte, []int) { return fileDescriptorMixnet, []int{3} }

func (m *NewRoundResponse) GetOnionKey() []byte {
	if m != nil {
		return m.OnionKey
	}
	return nil
}

type RoundSettings struct {
	Service   string   `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Round     uint32   `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	OnionKeys [][]byte `protobuf:"bytes,4,rep,name=onion_keys,json=onionKeys" json:"onion_keys,omitempty"`
}

func (m *RoundSettings) Reset()                    { *m = RoundSettings{} }
func (m *RoundSettings) String() string            { return proto.CompactTextString(m) }
func (*RoundSettings) ProtoMessage()               {}
func (*RoundSettings) Descriptor() ([]byte, []int) { return fileDescriptorMixnet, []int{4} }

func (m *RoundSettings) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *RoundSettings) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *RoundSettings) GetOnionKeys() [][]byte {
	if m != nil {
		return m.OnionKeys
	}
	return nil
}

type SetRoundSettingsRequest struct {
	Settings *RoundSettings `protobuf:"bytes,1,opt,name=settings" json:"settings,omitempty"`
}

func (m *SetRoundSettingsRequest) Reset()                    { *m = SetRoundSettingsRequest{} }
func (m *SetRoundSettingsRequest) String() string            { return proto.CompactTextString(m) }
func (*SetRoundSettingsRequest) ProtoMessage()               {}
func (*SetRoundSettingsRequest) Descriptor() ([]byte, []int) { return fileDescriptorMixnet, []int{5} }

func (m *SetRoundSettingsRequest) GetSettings() *RoundSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

type RoundSettingsSignature struct {
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *RoundSettingsSignature) Reset()                    { *m = RoundSettingsSignature{} }
func (m *RoundSettingsSignature) String() string            { return proto.CompactTextString(m) }
func (*RoundSettingsSignature) ProtoMessage()               {}
func (*RoundSettingsSignature) Descriptor() ([]byte, []int) { return fileDescriptorMixnet, []int{6} }

func (m *RoundSettingsSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type SetNumIncomingRequest struct {
	Service     string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Round       uint32 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	NumIncoming uint32 `protobuf:"varint,3,opt,name=numIncoming,proto3" json:"numIncoming,omitempty"`
}

func (m *SetNumIncomingRequest) Reset()                    { *m = SetNumIncomingRequest{} }
func (m *SetNumIncomingRequest) String() string            { return proto.CompactTextString(m) }
func (*SetNumIncomingRequest) ProtoMessage()               {}
func (*SetNumIncomingRequest) Descriptor() ([]byte, []int) { return fileDescriptorMixnet, []int{7} }

func (m *SetNumIncomingRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *SetNumIncomingRequest) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *SetNumIncomingRequest) GetNumIncoming() uint32 {
	if m != nil {
		return m.NumIncoming
	}
	return 0
}

type AddOnionsRequest struct {
	Service string   `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Round   uint32   `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Offset  uint32   `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Onions  [][]byte `protobuf:"bytes,4,rep,name=onions" json:"onions,omitempty"`
}

func (m *AddOnionsRequest) Reset()                    { *m = AddOnionsRequest{} }
func (m *AddOnionsRequest) String() string            { return proto.CompactTextString(m) }
func (*AddOnionsRequest) ProtoMessage()               {}
func (*AddOnionsRequest) Descriptor() ([]byte, []int) { return fileDescriptorMixnet, []int{8} }

func (m *AddOnionsRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *AddOnionsRequest) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *AddOnionsRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *AddOnionsRequest) GetOnions() [][]byte {
	if m != nil {
		return m.Onions
	}
	return nil
}

type CloseRoundRequest struct {
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Round   uint32 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
}

func (m *CloseRoundRequest) Reset()                    { *m = CloseRoundRequest{} }
func (m *CloseRoundRequest) String() string            { return proto.CompactTextString(m) }
func (*CloseRoundRequest) ProtoMessage()               {}
func (*CloseRoundRequest) Descriptor() ([]byte, []int) { return fileDescriptorMixnet, []int{9} }

func (m *CloseRoundRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *CloseRoundRequest) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

type GetOnionsRequest struct {
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Round   uint32 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Offset  uint32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Count   uint32 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *GetOnionsRequest) Reset()                    { *m = GetOnionsRequest{} }
func (m *GetOnionsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetOnionsRequest) ProtoMessage()               {}
func (*GetOnionsRequest) Descriptor() ([]byte, []int) { return fileDescriptorMixnet, []int{10} }

func (m *GetOnionsRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *GetOnionsRequest) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *GetOnionsRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetOnionsRequest) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetOnionsResponse struct {
	Onions [][]byte `protobuf:"bytes,1,rep,name=onions" json:"onions,omitempty"`
}

func (m *GetOnionsResponse) Reset()                    { *m = GetOnionsResponse{} }
func (m *GetOnionsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetOnionsResponse) ProtoMessage()               {}
func (*GetOnionsResponse) Descriptor() ([]byte, []int) { return fileDescriptorMixnet, []int{11} }

func (m *GetOnionsResponse) GetOnions() [][]byte {
	if m != nil {
		return m.Onions
	}
	return nil
}

type DeleteRoundRequest struct {
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Round   uint32 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
}

func (m *DeleteRoundRequest) Reset()                    { *m = DeleteRoundRequest{} }
func (m *DeleteRoundRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRoundRequest) ProtoMessage()               {}
func (*DeleteRoundRequest) Descriptor() ([]byte, []int) { return fileDescriptorMixnet, []int{12} }

func (m *DeleteRoundRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *DeleteRoundRequest) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func init() {
	proto.RegisterType((*Nothing)(nil), "convopb.Nothing")
	proto.RegisterType((*NewRoundRequest)(nil), "convopb.NewRoundRequest")
	proto.RegisterType((*PublicServerConfig)(nil), "convopb.PublicServerConfig")
	proto.RegisterType((*NewRoundResponse)(nil), "convopb.NewRoundResponse")
	proto.RegisterType((*RoundSettings)(nil), "convopb.RoundSettings")
	proto.RegisterType((*SetRoundSettingsRequest)(nil), "convopb.SetRoundSettingsRequest")
	proto.RegisterType((*RoundSettingsSignature)(nil), "convopb.RoundSettingsSignature")
	proto.RegisterType((*SetNumIncomingRequest)(nil), "convopb.SetNumIncomingRequest")
	proto.RegisterType((*AddOnionsRequest)(nil), "convopb.AddOnionsRequest")
	proto.RegisterType((*CloseRoundRequest)(nil), "convopb.CloseRoundRequest")
	proto.RegisterType((*GetOnionsRequest)(nil), "convopb.GetOnionsRequest")
	proto.RegisterType((*GetOnionsResponse)(nil), "convopb.GetOnionsResponse")
	proto.RegisterType((*DeleteRoundRequest)(nil), "convopb.DeleteRoundRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Mixnet service

type MixnetClient interface {
	NewRound(ctx context.Context, in *NewRoundRequest, opts ...grpc.CallOption) (*NewRoundResponse, error)
	SetRoundSettings(ctx context.Context, in *SetRoundSettingsRequest, opts ...grpc.CallOption) (*RoundSettingsSignature, error)
	SetNumIncoming(ctx context.Context, in *SetNumIncomingRequest, opts ...grpc.CallOption) (*Nothing, error)
	AddOnions(ctx context.Context, in *AddOnionsRequest, opts ...grpc.CallOption) (*Nothing, error)
	CloseRound(ctx context.Context, in *CloseRoundRequest, opts ...grpc.CallOption) (*Nothing, error)
	GetOnions(ctx context.Context, in *GetOnionsRequest, opts ...grpc.CallOption) (*GetOnionsResponse, error)
	DeleteRound(ctx context.Context, in *DeleteRoundRequest, opts ...grpc.CallOption) (*Nothing, error)
}

type mixnetClient struct {
	cc *grpc.ClientConn
}

func NewMixnetClient(cc *grpc.ClientConn) MixnetClient {
	return &mixnetClient{cc}
}

func (c *mixnetClient) NewRound(ctx context.Context, in *NewRoundRequest, opts ...grpc.CallOption) (*NewRoundResponse, error) {
	out := new(NewRoundResponse)
	err := grpc.Invoke(ctx, "/convopb.Mixnet/NewRound", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixnetClient) SetRoundSettings(ctx context.Context, in *SetRoundSettingsRequest, opts ...grpc.CallOption) (*RoundSettingsSignature, error) {
	out := new(RoundSettingsSignature)
	err := grpc.Invoke(ctx, "/convopb.Mixnet/SetRoundSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixnetClient) SetNumIncoming(ctx context.Context, in *SetNumIncomingRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := grpc.Invoke(ctx, "/convopb.Mixnet/SetNumIncoming", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixnetClient) AddOnions(ctx context.Context, in *AddOnionsRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := grpc.Invoke(ctx, "/convopb.Mixnet/AddOnions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixnetClient) CloseRound(ctx context.Context, in *CloseRoundRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := grpc.Invoke(ctx, "/convopb.Mixnet/CloseRound", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixnetClient) GetOnions(ctx context.Context, in *GetOnionsRequest, opts ...grpc.CallOption) (*GetOnionsResponse, error) {
	out := new(GetOnionsResponse)
	err := grpc.Invoke(ctx, "/convopb.Mixnet/GetOnions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixnetClient) DeleteRound(ctx context.Context, in *DeleteRoundRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := grpc.Invoke(ctx, "/convopb.Mixnet/DeleteRound", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Mixnet service

type MixnetServer interface {
	NewRound(context.Context, *NewRoundRequest) (*NewRoundResponse, error)
	SetRoundSettings(context.Context, *SetRoundSettingsRequest) (*RoundSettingsSignature, error)
	SetNumIncoming(context.Context, *SetNumIncomingRequest) (*Nothing, error)
	AddOnions(context.Context, *AddOnionsRequest) (*Nothing, error)
	CloseRound(context.Context, *CloseRoundRequest) (*Nothing, error)
	GetOnions(context.Context, *GetOnionsRequest) (*GetOnionsResponse, error)
	DeleteRound(context.Context, *DeleteRoundRequest) (*Nothing, error)
}

func RegisterMixnetServer(s *grpc.Server, srv MixnetServer) {
	s.RegisterService(&_Mixnet_serviceDesc, srv)
}

func _Mixnet_NewRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixnetServer).NewRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/convopb.Mixnet/NewRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixnetServer).NewRound(ctx, req.(*NewRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixnet_SetRoundSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoundSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixnetServer).SetRoundSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/convopb.Mixnet/SetRoundSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixnetServer).SetRoundSettings(ctx, req.(*SetRoundSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixnet_SetNumIncoming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNumIncomingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixnetServer).SetNumIncoming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/convopb.Mixnet/SetNumIncoming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixnetServer).SetNumIncoming(ctx, req.(*SetNumIncomingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixnet_AddOnions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOnionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixnetServer).AddOnions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/convopb.Mixnet/AddOnions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixnetServer).AddOnions(ctx, req.(*AddOnionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixnet_CloseRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixnetServer).CloseRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/convopb.Mixnet/CloseRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixnetServer).CloseRound(ctx, req.(*CloseRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixnet_GetOnions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixnetServer).GetOnions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/convopb.Mixnet/GetOnions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixnetServer).GetOnions(ctx, req.(*GetOnionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixnet_DeleteRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixnetServer).DeleteRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/convopb.Mixnet/DeleteRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixnetServer).DeleteRound(ctx, req.(*DeleteRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mixnet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "convopb.Mixnet",
	HandlerType: (*MixnetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewRound",
			Handler:    _Mixnet_NewRound_Handler,
		},
		{
			MethodName: "SetRoundSettings",
			Handler:    _Mixnet_SetRoundSettings_Handler,
		},
		{
			MethodName: "SetNumIncoming",
			Handler:    _Mixnet_SetNumIncoming_Handler,
		},
		{
			MethodName: "AddOnions",
			Handler:    _Mixnet_AddOnions_Handler,
		},
		{
			MethodName: "CloseRound",
			Handler:    _Mixnet_CloseRound_Handler,
		},
		{
			MethodName: "GetOnions",
			Handler:    _Mixnet_GetOnions_Handler,
		},
		{
			MethodName: "DeleteRound",
			Handler:    _Mixnet_DeleteRound_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixnet.proto",
}

func (m *Nothing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Nothing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *NewRoundRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewRoundRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Service) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMixnet(dAtA, i, uint64(len(m.Service)))
		i += copy(dAtA[i:], m.Service)
	}
	if m.Round != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMixnet(dAtA, i, uint64(m.Round))
	}
	if len(m.Chain) > 0 {
		for _, msg := range m.Chain {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMixnet(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PublicServerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicServerConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMixnet(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMixnet(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	return i, nil
}

func (m *NewRoundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewRoundResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OnionKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMixnet(dAtA, i, uint64(len(m.OnionKey)))
		i += copy(dAtA[i:], m.OnionKey)
	}
	return i, nil
}

func (m *RoundSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoundSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Service) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMixnet(dAtA, i, uint64(len(m.Service)))
		i += copy(dAtA[i:], m.Service)
	}
	if m.Round != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMixnet(dAtA, i, uint64(m.Round))
	}
	if len(m.OnionKeys) > 0 {
		for _, b := range m.OnionKeys {
			dAtA[i] = 0x22
			i++
			i = encodeVarintMixnet(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *SetRoundSettingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetRoundSettingsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Settings != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMixnet(dAtA, i, uint64(m.Settings.Size()))
		n1, err := m.Settings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *RoundSettingsSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoundSettingsSignature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMixnet(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	return i, nil
}

func (m *SetNumIncomingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetNumIncomingRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Service) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMixnet(dAtA, i, uint64(len(m.Service)))
		i += copy(dAtA[i:], m.Service)
	}
	if m.Round != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMixnet(dAtA, i, uint64(m.Round))
	}
	if m.NumIncoming != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMixnet(dAtA, i, uint64(m.NumIncoming))
	}
	return i, nil
}

func (m *AddOnionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddOnionsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Service) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMixnet(dAtA, i, uint64(len(m.Service)))
		i += copy(dAtA[i:], m.Service)
	}
	if m.Round != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMixnet(dAtA, i, uint64(m.Round))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMixnet(dAtA, i, uint64(m.Offset))
	}
	if len(m.Onions) > 0 {
		for _, b := range m.Onions {
			dAtA[i] = 0x22
			i++
			i = encodeVarintMixnet(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *CloseRoundRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseRoundRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Service) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMixnet(dAtA, i, uint64(len(m.Service)))
		i += copy(dAtA[i:], m.Service)
	}
	if m.Round != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMixnet(dAtA, i, uint64(m.Round))
	}
	return i, nil
}

func (m *GetOnionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOnionsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Service) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMixnet(dAtA, i, uint64(len(m.Service)))
		i += copy(dAtA[i:], m.Service)
	}
	if m.Round != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMixnet(dAtA, i, uint64(m.Round))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMixnet(dAtA, i, uint64(m.Offset))
	}
	if m.Count != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMixnet(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *GetOnionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOnionsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Onions) > 0 {
		for _, b := range m.Onions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMixnet(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *DeleteRoundRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRoundRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Service) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMixnet(dAtA, i, uint64(len(m.Service)))
		i += copy(dAtA[i:], m.Service)
	}
	if m.Round != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMixnet(dAtA, i, uint64(m.Round))
	}
	return i, nil
}

func encodeFixed64Mixnet(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Mixnet(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMixnet(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Nothing) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *NewRoundRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovMixnet(uint64(l))
	}
	if m.Round != 0 {
		n += 1 + sovMixnet(uint64(m.Round))
	}
	if len(m.Chain) > 0 {
		for _, e := range m.Chain {
			l = e.Size()
			n += 1 + l + sovMixnet(uint64(l))
		}
	}
	return n
}

func (m *PublicServerConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovMixnet(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMixnet(uint64(l))
	}
	return n
}

func (m *NewRoundResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.OnionKey)
	if l > 0 {
		n += 1 + l + sovMixnet(uint64(l))
	}
	return n
}

func (m *RoundSettings) Size() (n int) {
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovMixnet(uint64(l))
	}
	if m.Round != 0 {
		n += 1 + sovMixnet(uint64(m.Round))
	}
	if len(m.OnionKeys) > 0 {
		for _, b := range m.OnionKeys {
			l = len(b)
			n += 1 + l + sovMixnet(uint64(l))
		}
	}
	return n
}

func (m *SetRoundSettingsRequest) Size() (n int) {
	var l int
	_ = l
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovMixnet(uint64(l))
	}
	return n
}

func (m *RoundSettingsSignature) Size() (n int) {
	var l int
	_ = l
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMixnet(uint64(l))
	}
	return n
}

func (m *SetNumIncomingRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovMixnet(uint64(l))
	}
	if m.Round != 0 {
		n += 1 + sovMixnet(uint64(m.Round))
	}
	if m.NumIncoming != 0 {
		n += 1 + sovMixnet(uint64(m.NumIncoming))
	}
	return n
}

func (m *AddOnionsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovMixnet(uint64(l))
	}
	if m.Round != 0 {
		n += 1 + sovMixnet(uint64(m.Round))
	}
	if m.Offset != 0 {
		n += 1 + sovMixnet(uint64(m.Offset))
	}
	if len(m.Onions) > 0 {
		for _, b := range m.Onions {
			l = len(b)
			n += 1 + l + sovMixnet(uint64(l))
		}
	}
	return n
}

func (m *CloseRoundRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovMixnet(uint64(l))
	}
	if m.Round != 0 {
		n += 1 + sovMixnet(uint64(m.Round))
	}
	return n
}

func (m *GetOnionsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovMixnet(uint64(l))
	}
	if m.Round != 0 {
		n += 1 + sovMixnet(uint64(m.Round))
	}
	if m.Offset != 0 {
		n += 1 + sovMixnet(uint64(m.Offset))
	}
	if m.Count != 0 {
		n += 1 + sovMixnet(uint64(m.Count))
	}
	return n
}

func (m *GetOnionsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Onions) > 0 {
		for _, b := range m.Onions {
			l = len(b)
			n += 1 + l + sovMixnet(uint64(l))
		}
	}
	return n
}

func (m *DeleteRoundRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovMixnet(uint64(l))
	}
	if m.Round != 0 {
		n += 1 + sovMixnet(uint64(m.Round))
	}
	return n
}

func sovMixnet(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMixnet(x uint64) (n int) {
	return sovMixnet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Nothing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMixnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Nothing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Nothing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMixnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMixnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewRoundRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMixnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewRoundRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewRoundRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMixnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMixnet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = append(m.Chain, &PublicServerConfig{})
			if err := m.Chain[len(m.Chain)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMixnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMixnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicServerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMixnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublicServerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublicServerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMixnet
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMixnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMixnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMixnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewRoundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMixnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewRoundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewRoundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnionKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMixnet
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnionKey = append(m.OnionKey[:0], dAtA[iNdEx:postIndex]...)
			if m.OnionKey == nil {
				m.OnionKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMixnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMixnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoundSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMixnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoundSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoundSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMixnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnionKeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMixnet
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnionKeys = append(m.OnionKeys, make([]byte, postIndex-iNdEx))
			copy(m.OnionKeys[len(m.OnionKeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMixnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMixnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetRoundSettingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMixnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetRoundSettingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetRoundSettingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMixnet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &RoundSettings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMixnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMixnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoundSettingsSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMixnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoundSettingsSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoundSettingsSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMixnet
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMixnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMixnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetNumIncomingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMixnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetNumIncomingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetNumIncomingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMixnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumIncoming", wireType)
			}
			m.NumIncoming = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumIncoming |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMixnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMixnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddOnionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMixnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddOnionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddOnionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMixnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Onions", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMixnet
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Onions = append(m.Onions, make([]byte, postIndex-iNdEx))
			copy(m.Onions[len(m.Onions)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMixnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMixnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseRoundRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMixnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseRoundRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseRoundRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMixnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMixnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMixnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOnionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMixnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOnionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOnionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMixnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMixnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMixnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOnionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMixnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOnionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOnionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Onions", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMixnet
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Onions = append(m.Onions, make([]byte, postIndex-iNdEx))
			copy(m.Onions[len(m.Onions)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMixnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMixnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRoundRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMixnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRoundRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRoundRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMixnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMixnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMixnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMixnet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMixnet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMixnet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMixnet
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMixnet
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMixnet(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMixnet = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMixnet   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mixnet.proto", fileDescriptorMixnet) }

var fileDescriptorMixnet = []byte{
	// 582 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x5d, 0x8f, 0xd2, 0x4c,
	0x14, 0xa6, 0x6f, 0x97, 0x8f, 0x1e, 0xd8, 0xd7, 0xee, 0x64, 0xc5, 0xda, 0x55, 0x6c, 0xe6, 0x8a,
	0xc4, 0x08, 0x11, 0x13, 0x2f, 0x8c, 0x31, 0xae, 0x90, 0x18, 0x63, 0x16, 0x4d, 0xb9, 0xf0, 0x4e,
	0x03, 0x65, 0x28, 0x13, 0x61, 0x06, 0x3b, 0x53, 0x74, 0xff, 0x85, 0x3f, 0xcb, 0x4b, 0x7f, 0x82,
	0xc1, 0x3b, 0x7f, 0x85, 0x61, 0x68, 0xa7, 0x7c, 0xd4, 0x0b, 0x77, 0xe3, 0x5d, 0x9f, 0xf3, 0xf5,
	0x9c, 0x73, 0xe6, 0xe9, 0x81, 0xda, 0x9c, 0x7e, 0x61, 0x44, 0xb6, 0x16, 0x11, 0x97, 0x1c, 0x95,
	0x03, 0xce, 0x96, 0x7c, 0x31, 0x72, 0x1f, 0x84, 0x54, 0x4e, 0xe3, 0x51, 0x2b, 0xe0, 0xf3, 0x76,
	0xc8, 0x43, 0xde, 0x56, 0xfe, 0x51, 0x3c, 0x51, 0x48, 0x01, 0xf5, 0xb5, 0xc9, 0xc3, 0x16, 0x94,
	0xfb, 0x5c, 0x4e, 0x29, 0x0b, 0xb1, 0x84, 0x1b, 0x7d, 0xf2, 0xd9, 0xe7, 0x31, 0x1b, 0xfb, 0xe4,
	0x53, 0x4c, 0x84, 0x44, 0x0e, 0x94, 0x05, 0x89, 0x96, 0x34, 0x20, 0x8e, 0xe1, 0x19, 0x4d, 0xcb,
	0x4f, 0x21, 0x3a, 0x85, 0x62, 0xb4, 0x8e, 0x74, 0xfe, 0xf3, 0x8c, 0xe6, 0xb1, 0xbf, 0x01, 0xe8,
	0x21, 0x14, 0x83, 0xe9, 0x90, 0x32, 0xc7, 0xf4, 0xcc, 0x66, 0xb5, 0x73, 0xd6, 0x4a, 0xba, 0x6a,
	0xbd, 0x8d, 0x47, 0x33, 0x1a, 0x0c, 0x48, 0xb4, 0x24, 0x51, 0x97, 0xb3, 0x09, 0x0d, 0xfd, 0x4d,
	0x24, 0x7e, 0x0e, 0xe8, 0xd0, 0x89, 0x6c, 0x30, 0x3f, 0x92, 0x4b, 0x45, 0x5a, 0xf3, 0xd7, 0x9f,
	0xeb, 0x56, 0x86, 0xe3, 0x71, 0x44, 0x84, 0x50, 0x94, 0x96, 0x9f, 0x42, 0xdc, 0x06, 0x3b, 0xeb,
	0x5b, 0x2c, 0x38, 0x13, 0x04, 0x9d, 0x81, 0xc5, 0x19, 0xe5, 0xec, 0x43, 0x56, 0xa5, 0xa2, 0x0c,
	0xaf, 0xc9, 0x25, 0x7e, 0x0f, 0xc7, 0x2a, 0x7a, 0x40, 0xa4, 0xa4, 0x2c, 0x14, 0x7f, 0x3d, 0xe6,
	0x5d, 0x00, 0x5d, 0x5d, 0x38, 0x47, 0x9e, 0xd9, 0xac, 0xf9, 0x56, 0x5a, 0x5e, 0xe0, 0x0b, 0xb8,
	0x35, 0x20, 0x72, 0x87, 0x22, 0x5d, 0x68, 0x07, 0x2a, 0x22, 0x31, 0x29, 0xaa, 0x6a, 0xa7, 0xae,
	0x77, 0xb4, 0x9b, 0xa0, 0xe3, 0xf0, 0x63, 0xa8, 0xef, 0xb8, 0x06, 0x34, 0x64, 0x43, 0x19, 0x47,
	0x04, 0xdd, 0x01, 0x4b, 0xa4, 0x20, 0x99, 0x32, 0x33, 0x60, 0x0a, 0x37, 0x07, 0x44, 0xf6, 0xe3,
	0xf9, 0x2b, 0x16, 0xf0, 0x39, 0x65, 0xe1, 0x55, 0x5f, 0xd5, 0x83, 0x2a, 0xcb, 0xaa, 0x38, 0xa6,
	0xf2, 0x6d, 0x9b, 0x70, 0x04, 0xf6, 0xf9, 0x78, 0xfc, 0x66, 0xbd, 0x01, 0x71, 0x55, 0x96, 0x3a,
	0x94, 0xf8, 0x64, 0x22, 0x88, 0x4c, 0x08, 0x12, 0xa4, 0xec, 0xaa, 0x70, 0xb2, 0xe8, 0x04, 0xe1,
	0x2e, 0x9c, 0x74, 0x67, 0x5c, 0x90, 0xeb, 0x08, 0x16, 0x2f, 0xc0, 0x7e, 0x49, 0xe4, 0xbf, 0x69,
	0xfc, 0x14, 0x8a, 0x01, 0x8f, 0x99, 0x74, 0x8e, 0x36, 0xd1, 0x0a, 0xe0, 0xfb, 0x70, 0xb2, 0xc5,
	0x98, 0xc8, 0x35, 0x9b, 0xd1, 0xd8, 0x99, 0xb1, 0x07, 0xa8, 0x47, 0x66, 0x44, 0x5e, 0x6b, 0xc8,
	0xce, 0x2f, 0x13, 0x4a, 0x17, 0xea, 0x58, 0xa0, 0x73, 0xa8, 0xa4, 0xff, 0x0a, 0x72, 0xb4, 0xf2,
	0xf6, 0x7e, 0x7b, 0xf7, 0x76, 0x8e, 0x67, 0xd3, 0x29, 0x2e, 0xa0, 0x77, 0x60, 0xef, 0xab, 0x1b,
	0x79, 0x3a, 0xe1, 0x0f, 0xc2, 0x77, 0xef, 0xe5, 0xcb, 0x5c, 0x6b, 0x19, 0x17, 0x50, 0x0f, 0xfe,
	0xdf, 0xd5, 0x2b, 0x6a, 0x6c, 0x97, 0x3d, 0x14, 0xb2, 0x6b, 0x67, 0x7d, 0x26, 0x37, 0xac, 0x80,
	0x9e, 0x80, 0xa5, 0xa5, 0x88, 0xb2, 0x41, 0xf6, 0xe5, 0x99, 0x9b, 0xfb, 0x14, 0x20, 0x93, 0x14,
	0x72, 0x75, 0xc4, 0x81, 0xce, 0x72, 0xb3, 0x7b, 0x60, 0xe9, 0x97, 0xdd, 0x62, 0xde, 0xd7, 0x97,
	0xeb, 0xe6, 0xb9, 0xf4, 0x7a, 0x9f, 0x41, 0x75, 0xeb, 0xc9, 0x51, 0x76, 0x42, 0x0f, 0x85, 0x90,
	0xd7, 0xc5, 0x0b, 0xfb, 0xdb, 0xaa, 0x61, 0x7c, 0x5f, 0x35, 0x8c, 0x1f, 0xab, 0x86, 0xf1, 0xf5,
	0x67, 0xa3, 0x30, 0x2a, 0xa9, 0x4b, 0xff, 0xe8, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb5, 0xb5,
	0x1c, 0x24, 0x31, 0x06, 0x00, 0x00,
}
